unsigned int __fastcall dramc_simple_wr_test(unsigned int dram_size, unsigned int test_length)
{
  int v2; // r3
  _DWORD *v3; // r2
  unsigned int v4; // r0
  int v5; // r3
  int v6; // r4
  _DWORD *v7; // r4
  int v8; // r3
  int v9; // r5
  int v10; // r7
  int v11; // r6
  int v12; // r1
  int v13; // r2
  _DWORD *v14; // r3
  int v15; // r6
  int v16; // r5
  int v18; // [sp+0h] [bp-18h]

  v18 = v2;
  v3 = (_DWORD *)0x40000000;
  v4 = dram_size >> 1 << 20;
  v5 = 0;
  while ( v5 != test_length )
  {
    *v3 = v5 + 19088743;
    v6 = v5++ - 19088744;
    *(_DWORD *)((char *)v3 + v4) = v6;
    ++v3;
  }
  v7 = (_DWORD *)0x40000000;
  v8 = 0;
  while ( v8 != test_length )
  {
    v9 = (int)v7 + v4;
    v10 = *(_DWORD *)((char *)v7 + v4);
    v11 = v8 - 19088744;
    if ( v10 != v8 - 19088744 )
    {
      printf("DRAM simple test FAIL.\n");
      v12 = v10;
      v13 = v11;
      v14 = (_DWORD *)v9;
LABEL_9:
      printf("%x != %x at address %x\n", v12, v13, v14, v18);
      return 1;
    }
    v15 = *v7;
    v16 = v8 + 19088743;
    if ( *v7 != v8 + 19088743 )
    {
      printf("DRAM simple test FAIL.\n");
      v12 = v15;
      v13 = v16;
      v14 = v7;
      goto LABEL_9;
    }
    ++v8;
    ++v7;
  }
  printf("DRAM simple test OK.\n");
  return 0;
}